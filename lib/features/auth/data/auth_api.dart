import 'package:dio/dio.dart';
import 'package:prokat_app/core/network/dio_client.dart';

/// –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Å–ª–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
/// –í–ê–ñ–ù–û: /login ‚Äî form-urlencoded —Å grant_type=password.
/// –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–∏ (—è –æ—Å—Ç–∞–≤–∏–ª –æ—á–µ–≤–∏–¥–Ω—ã–µ –ø—É—Ç–∏).
class AuthApi {
  final Dio _dio = dio;

  /// üì≤ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
  Future<void> sendPhone(String phone) async {
    // TODO: –∑–∞–º–µ–Ω–∏ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await _dio.post('/auth/send-phone', data: {'phone': phone});
  }

  /// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏–∑ –°–ú–°/—Ç–µ–ª–µ–≥—Ä–∞–º–∞
  Future<void> verifyCode(String phone, String code) async {
    // TODO: –∑–∞–º–µ–Ω–∏ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await _dio.post('/auth/verify', data: {'phone': phone, 'code': code});
  }

  /// üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–∞
  Future<void> setPassword(String phone, String password) async {
    // TODO: –∑–∞–º–µ–Ω–∏ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await _dio.post('/auth/set-password', data: {
      'phone': phone,
      'password': password,
    });
  }

  /// üîì –õ–æ–≥–∏–Ω –ø–æ –ø–∞—Ä–æ–ª—é (OAuth2 Password Grant).
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ `Authorization`, –Ω–∞–ø—Ä–∏–º–µ—Ä: "Bearer eyJ...".
  Future<String> login(String username, String password) async {
    final res = await _dio.post(
      '/login',
      data: {
        'grant_type': 'password',
        'username': username,
        'password': password,
        'scope': '',
        'client_id': '',
        'client_secret': '',
      },
      options: Options(contentType: Headers.formUrlEncodedContentType),
    );

    final data = res.data as Map<String, dynamic>;
    final token = data['access_token']?.toString();
    var type = (data['token_type']?.toString() ?? 'Bearer');
    // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª "bearer"
    if (type.toLowerCase() == 'bearer') type = 'Bearer';

    if (token == null || token.isEmpty) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token');
    }
    return '$type $token';
  }
}
